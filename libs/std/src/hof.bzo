HigherOrder #Module
Std         #Include








map :: [[:A'], [A' ;; B']] ;; [:B']
map :: #map

"parallel reduce"
fold :: [[:A'], [[A', A'] ;; A']] ;; A'
fold :: #pfold

"sequential reduce"
reduce :: [[:A'], B', [[B', A'] ;; B']] ;; B'
reduce :: #sfold

"parallel scan"
scan :: [[:A'], [[A', A'] ;; A']] ;; [:A']
scan :: #pscan

"sequential scan"
chain :: [[:A'], B', [[B', A'] ;; B']] ;; B'
chain :: #sscan

"overloaded implementations for zip2, zip3, and zip4"
zip :: [[:A'], [:B']] ;; [:[A', B']]
zip :: #zip

zip :: [[:A'], [:B'], [:C']] ;; [:[A', B', C']]
zip :: #zip

zip :: [[:A'], [:B'], [:C'], [:D']] ;; [:[A', B', C', D']]
zip :: #zip

"overloaded implementations for zip2, zip3, and zip4"
unzip :: [:[A', B']] ;; [[:A'], [:B']]
unzip :: #unzip

unzip :: [:[A', B', C']] ;; [[:A'], [:B'], [:C']]
unzip :: #unzip

unzip :: [:[A', B', C', D']] ;; [[:A'], [:B'], [:C'], [:D']]
unzip :: #unzip

"function composition"
>> :: [[B' ;; C'], [A' ;; B']] ;; [A' ;; C']
[g, f] >> :: f g









[A'] Functor :: {
  [F'.Functor] map :: [A' F', A' ;; B'] ;; B' F'
}

[A'] Foldable :: {
  [F'.Foldable] fold :: [A' F', [A', A'] ;; A'] ;; A'
}

[A'] Reduceable :: {
  [R'.Reduceable] reduce :: [A' R', B', [B', A'] ;; B'] ;; B'
}

[C'.(Functor, Reduceable)] mapreduce :: [A' C', A' ;; B', C', [C', B'] ;; C'] ;; C'
[objs, mapfn, init, redfn] mapreduce :: objs mapfn.. init`redfn`reduce

[C'.(Functor, Reduceable)] mapfold :: [A' C', A' ;; B', [B', B'] ;; B'] ;; B'
[objs, mapfn, fldfn] mapfold :: objs mapfn.. fldfn`fold
