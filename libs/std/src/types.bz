Types $Module
Std   $import










isLeft :: ((A'. B') Either) ;; Bool
(Left)  isLeft :: True
(Right) isLeft :: False

isRight :: ((A'. B') Either) ;; Bool
isRight :: isLeft !!

fromLeft! :: ((A'. B') Either) ;; A'
(x:Left) fromLeft! :: x
(_)      fromLeft! :: fail!

fromRight! :: ((A'. B') Either) ;; A'
(x:Right) fromRight! :: x
(_)       fromRight! :: fail!










isJust :: ((A') Maybe) ;; Bool
(Just) isJust :: True
(_)    isJust :: False

isNothing :: ((A') Maybe) ;; Bool
isNothing :: isJust !!

fromJust! :: ((A') Maybe) ;; A'
(x:Just) fromJust! :: x
(_)      fromJust! :: fail!

fromMaybe :: (A'. (A') Maybe) ;; A'
(x. y:Just) fromMaybe :: y
(x. _     ) fromMaybe :: x

>>= :: ((A') Maybe. (A' ;; B')) ;; ((B') Maybe)
(f. x:Just) >>= :: x f
(f. nada  ) >>= :: nada


