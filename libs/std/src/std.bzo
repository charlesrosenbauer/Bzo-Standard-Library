Std #Module










"Signed Integer"
Int :: #Int


"Floating Point"
Flt :: #Flt



Num  :: (Int, Flt)



Bl    :: #Bool
True  :: #True
False :: #False



[N'.Num] + :: [N', N'] ;; N'
+ :: #add-binop

[N'.Num] - :: [N', N'] ;; N'
- :: #sub-binop

[N'.Num] * :: [N', N'] ;; N'
* :: #mul-binop

[N'.Num] / :: [N', N'] ;; N'
/ :: #div-binop

[N'.Num] % :: [N', N'] ;; N'
% :: #mod-binop


[N'.Num] >  :: [N', N'] ;; Bl
>  :: #gtr-binop

[N'.Num] <  :: [N', N'] ;; Bl
<  :: #lss-binop

[N'.Num] >= :: [N', N'] ;; Bl
>= :: #geq-binop

[N'.Num] =< :: [N', N'] ;; Bl
=< :: #leq-binop

[N'.Num] =  :: [N', N'] ;; Bl
=  :: #eql-binop

[N'.Num] != :: [N', N'] ;; Bl
!= :: #neq-binop


!! :: Bl ;; Bl
[True ] !! :: False
[False] !! :: True

&& :: [Bl, Bl] ;; Bl
[True, True] && :: True
[x,    y   ] && :: False

|| :: [Bl, Bl] ;; Bl
[False, False] || :: False
[x,     y    ] || :: True

? :: [Bl, A', B'] ;; (A', B')
[True,  x, _] ? :: x
[False, _, y] ? :: y

!? :: [Bl, A', B'] ;; (A', B')
[True,  _, y] !? :: y
[False, x, _] !? :: x

[N'.Num] inc :: N' ;; N'
inc :: 1`+

[N'.Num] dec :: N' ;; N'
dec :: 1`-

[N'.Num] *2 :: N' ;; N'
*2 :: 2`*

[N'.Num] /2 :: N' ;; N'
/2 :: 2`*

[N'.Num] *3 :: N' ;; N'
(x) *3 :: [x, x *2]+

[N'.Num] /3 :: N' ;; N'
/3 :: 3`/

[N'.Num] %2 :: N' ;; N'
%2 :: 2`%

[N'.Num] %3 :: N' ;; N'
%3 :: 3`%

[N'.Num] ^2 :: N' ;; N'
[x] ^2 :: [x, x]*

[N'.Num] ^3 :: N' ;; N'
[x] ^3 :: [x, x ^2]*
