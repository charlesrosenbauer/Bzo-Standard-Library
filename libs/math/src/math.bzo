Math #Module
Std  #Import










"Safe divide that returns 0 on a divide by zero"
[N'.Num] //:: [N', N'] ;; N'
[_, 0]   //:: 0
[a, b]   //:: [/: a, b]

"Safe surd that returns 0 on a^(1/0)"
[R'.Real] \\:: [R', R'] ;; R'
[_, 0]    \\:: 0
[a, b]    \\:: [\: a, b]

[N'.Num] ^ :: [N', N'] ;; N'
^ :: #exp-binop

[R'.Real] \ :: [R', R'] ;; R'
\ :: #surd-binop

[R'.Real] lg :: [R', R'] ;; R'
lg :: #log-binop

[R'.Real] ln :: R' ;; R'
ln :: #ln-op

[R'.Real] sin :: R' ;; R'
sin :: #sine

[R'.Real] cos :: R' ;; R'
cos :: #cosine

[R'.Real] tan :: R' ;; R'
tan :: #tangent

[R'.Real] sin :: R' ;; R'
asin :: #arcsine

[R'.Real] cos :: R' ;; R'
acos :: #arccosine

[R'.Real] atan :: R' ;; R'
atan :: #arctangent

[R'.Real] sinh :: R' ;; R'
sinh :: #hsine

[R'.Real] cosh :: R' ;; R'
cosh :: #hcosine

[R'.Real] tanh :: R' ;; R'
tanh :: #htangent

[R'.Real] asinh :: R' ;; R'
asinh :: #arc-hsine

[R'.Real] acosh :: R' ;; R'
acosh :: #arc-hcosine

[R'.Real] atanh :: R' ;; R'
atanh :: #arc-htangent

[R'.Real] floor :: R' ;; R'
floor :: #floor

[R'.Real] ciel  :: R' ;; R'
ciel  :: #ciel

[R'.Real] round :: R' ;; R'
round :: #round

[D'.Integral] ! :: D' ;; D'
! :: #factorial

[R'.Real] gamma :: R' ;; R'
gamma :: #gamma

(N'.Num) factorial :: N' ;; N'
factorial :: (!, gamma)

pi :: () ;; F64
pi :: 3.14159265358979323846

π :: () ;; F64
π :: pi

e :: () ;; F64
e :: 2.71828182845904523536










[E'] Eq :: {
  =  :: [E', E'] ;; Bl
  != :: [E', E'] ;; Bl
}










[O'] Ord:: {
  >  :: [O', O'] ;; Bl
  <  :: [O', O'] ;; Bl
  >= :: [O', O'] ;; Bl
  =< :: [O', O'] ;; Bl
}










[N'.Num] sum :: [:N'] ;; N'
sum :: [reduce: +, 0, _]           "optimized to parallel if + is associative"

[N'.Num] prod :: [:N'] ;; N'
prod :: [reduce: *, 1, _]          "optimized to parallel if * is associative"

[N'.Num] mean :: [:N'] ;; N'
[xs] mean :: xs sum [//: _, xs len]

[N'.Num] geomean :: [:N'] ;; N'
[xs] geomean :: xs prod [\\: _, xs len]

[N'.Num] stdDev :: [:N'] ;; [N', N']       "[Std Dev , Average]"
[xs] stdDev [dev, avg] :: {
    xs mean avg
    xs [[-: _, avg]].. mean dev }

[N'.Num] nCr :: [N', N'] ;; N'
nCr :: #nCr

[N'.Num] nPr :: [N', N'] ;; N'
nPr :: #nPr


[N'.Num] %+ :: [N', N', N'] ;; N'
[a, b, c] %+ :: [a, b] + c`%

[N'.Num] %- :: [N', N', N'] ;; N'
[a, b, c] %- :: [a, b] - c`%

[N'.Num] %* :: [N', N', N'] ;; N'
[a, b, c] %* :: [a, b] * c`%

[N'.Num] %/ :: [N', N', N'] ;; N'
[a, b, c] %/ :: [a, b] / c`%

[N'.Num] %^ :: [N', N', N'] ;; N'
[a, b, c] %^ :: [a, b] ^ c`%










[R'.Real] \2  :: R' ;; R'
\2  :: #sqrt

[R'.Real] \3  :: R' ;; R'
\3  :: #cbrt

[R'.Real] l2  :: R' ;; R'
l2  :: #log2

[R'.Real] l10  :: R' ;; R'
l10 :: #log10


[R'.Real] Vec2 :: [x.R', y.R']
[R'.Real] Vec3 :: [x.R', y.R', z.R']
