Math $Module
Std  $link










^ :: (N':Num. N') ;; N'
^ :: $exp-binop

\ :: (R':Real. R') ;; R'
\ :: $surd-binop

lg :: (R':Real. R') ;; R'
lg :: $log-binop

ln :: (R':Real) ;; R'
ln :: $ln-op

sin :: (R':Real) ;; R'
sin :: $sine

cos :: (R':Real) ;; R'
cos :: $cosine

tan :: (R':Real) ;; R'
tan :: $tangent

asin :: (R':Real) ;; R'
asin :: $arcsine

acos :: (R':Real) ;; R'
acos :: $arccosine

atan :: (R':Real) ;; R'
atan :: $arctangent

sinh :: (R':Real) ;; R'
sinh :: $hsine

cosh :: (R':Real) ;; R'
cosh :: $hcosine

tanh :: (R':Real) ;; R'
tanh :: $htangent

asinh :: (R':Real) ;; R'
asinh :: $arc-hsine

acosh :: (R':Real) ;; R'
acosh :: $arc-hcosine

atanh :: (R':Real) ;; R'
atanh :: $arc-htangent

floor :: (R':Real) ;; R'
floor :: $floor

ciel  :: (R':Real) ;; R'
ciel  :: $ciel

round :: (R':Real) ;; R'
round :: $round

! :: (D':Discrete) ;; D'
! :: $factorial

gamma :: (R':Real) ;; R'
gamma :: $gamma
gamma :: Γ

factorial :: (N':Num) ;; N'
factorial :: (!, Γ)

pi :: () ;; F64
pi :: 3.14159265358979323846

π :: () ;; F64
π :: pi

e :: () ;; F64
e :: 2.71828182845904523536










sum :: [](N':Num) ;; N'
sum :: 0`+`reduce           "optimized to parallel if + is associative"

prod :: [](N':Num) ;; N'
prod :: 1`*`reduce          "optimized to parallel if * is associative"

mean :: [](N':Num) ;; N'
(xs) mean :: xs sum (xs len)`//

geomean :: [](N':Num) ;; N'
(xs) geomean :: xs prod (xs len)`\

stdDev :: [](N':Num) ;; (N'. N')       "(Std Dev . Average)"
(xs) stdDev (dev. avg) :: {
    xs mean avg
    xs (avg`-).. mean dev }

nCr :: (N':Num. N') ;; N'
nCr :: $nCr

nPr :: (N':Num. N') ;; N'
nPr :: $nPr


%+ :: (N':Num. N'. N') ;; N'
(a. b. c) %+ :: (a. b) + c`%

%- :: (N':Num. N'. N') ;; N'
(a. b. c) %- :: (a. b) - c`%

%* :: (N':Num. N'. N') ;; N'
(a. b. c) %* :: (a. b) * c`%

%/ :: (N':Num. N'. N') ;; N'
(a. b. c) %/ :: (a. b) / c`%

%^ :: (N':Num. N'. N') ;; N'
(a. b. c) %^ :: (a. b) ^ c`%










\2  :: (R':Real) ;; R'
\2  :: $sqrt

\3  :: (R':Real) ;; R'
\3  :: $cbrt

l2  :: (R':Real) ;; R'
l2  :: $log2

l10  :: (R':Real) ;; R'
l10 :: $log10


Vec2 :: (x:F32. y:F32)
Vec3 :: (x:F32. y:F32. z:F32)
