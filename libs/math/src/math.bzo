Math #Module
Std  #Import










"Safe divide that returns 0 on a divide by zero"
[N'.Num] //:: [N', N'] ;; N'
[_, 0]   //:: 0
[a, b]   //:: [/: a, b]

"Safe surd that returns 0 on a^(1/0)"
[F'.Flt] \\:: [F', F'] ;; F'
[_, 0]    \\:: 0
[a, b]    \\:: [\: a, b]

[N'.Num] ^ :: [N', N'] ;; N'
^ :: #exp-binop

[F'.Flt] \ :: [F', F'] ;; F'
\ :: #surd-binop

[F'.Flt] lg :: [F', F'] ;; F'
lg :: #log-binop

[F'.Flt] ln :: F' ;; F'
ln :: #ln-op

[F'.Flt] sin :: F' ;; F'
sin :: #sine

[F'.Flt] cos :: F' ;; F'
cos :: #cosine

[F'.Flt] tan :: F' ;; F'
tan :: #tangent

[F'.Flt] asin :: F' ;; F'
asin :: #arcsine

[F'.Flt] acos :: F' ;; F'
acos :: #arccosine

[F'.Flt] atan :: F' ;; F'
atan :: #arctangent

[F'.Flt] sinh :: F' ;; F'
sinh :: #hsine

[F'.Flt] cosh :: F' ;; F'
cosh :: #hcosine

[F'.Flt] tanh :: F' ;; F'
tanh :: #htangent

[F'.Flt] asinh :: F' ;; F'
asinh :: #arc-hsine

[F'.Flt] acosh :: F' ;; F'
acosh :: #arc-hcosine

[F'.Flt] atanh :: F' ;; F'
atanh :: #arc-htangent

[F'.Flt] floor :: F' ;; F'
floor :: #floor

[F'.Flt] ciel  :: F' ;; F'
ciel  :: #ciel

[F'.Flt] round :: F' ;; F'
round :: #round

[D'.Int] ! :: D' ;; D'
! :: #factorial

[F'.Flt] gamma :: F' ;; F'
gamma :: #gamma

(N'.Num) factorial :: N' ;; N'
factorial :: (!, gamma)

pi :: () ;; Flt
pi :: 3.14159265358979323846

π :: () ;; Flt
π :: pi

e :: () ;; Flt
e :: 2.71828182845904523536










[E'] Eq :: {
  =  :: [E', E'] ;; Bl
  != :: [E', E'] ;; Bl
}










[O'] Ord:: {
  >  :: [O', O'] ;; Bl
  <  :: [O', O'] ;; Bl
  >= :: [O', O'] ;; Bl
  =< :: [O', O'] ;; Bl
}










[N'.Num] sum :: [:N'] ;; N'
sum :: [reduce: +, 0, _]           "optimized to parallel if + is associative"

[N'.Num] prod :: [:N'] ;; N'
prod :: [reduce: *, 1, _]          "optimized to parallel if * is associative"

[N'.Num] mean :: [:N'] ;; N'
[xs] mean :: xs sum [//: _, xs len]

[N'.Num] geomean :: [:N'] ;; N'
[xs] geomean :: xs prod [\\: _, xs len]

[N'.Num] stdDev :: [:N'] ;; [N', N']       "[Std Dev , Average]"
[xs] stdDev :: {
    xs mean avg
    xs [[-: _, avg]].. mean dev
    [avg, dev]}

[N'.Num] nCr :: [N', N'] ;; N'
nCr :: #nCr

[N'.Num] nPr :: [N', N'] ;; N'
nPr :: #nPr


[N'.Num] %+ :: [N', N', N'] ;; N'
[a, b, c] %+ :: [a, b] + c`%

[N'.Num] %- :: [N', N', N'] ;; N'
[a, b, c] %- :: [a, b] - c`%

[N'.Num] %* :: [N', N', N'] ;; N'
[a, b, c] %* :: [a, b] * c`%

[N'.Num] %/ :: [N', N', N'] ;; N'
[a, b, c] %/ :: [a, b] / c`%

[N'.Num] %^ :: [N', N', N'] ;; N'
[a, b, c] %^ :: [a, b] ^ c`%










[F'.Flt] \2  :: F' ;; F'
\2  :: #sqrt

[F'.Flt] \3  :: F' ;; F'
\3  :: #cbrt

[F'.Flt] l2  :: F' ;; F'
l2  :: #log2

[F'.Flt] l10  :: F' ;; F'
l10 :: #log10


[F'.Flt] Vec2 :: [x.F', y.F']
[F'.Flt] Vec3 :: [x.F', y.F', z.F']
