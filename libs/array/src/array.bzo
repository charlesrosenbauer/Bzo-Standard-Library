Array #Module
Std   #Import










[F'] Functor :: {
  map   :: [A' F',          A'  ;; B'] ;; B' F'
}

"map #mapAlias"

[F'.Functor] Foldable :: {
  pfold :: [A' F', A', [A', A'] ;; A'] ;; A'
  sfold :: [A' F', B', [B', A'] ;; B'] ;; B'
  pscan :: [A' F', A', [A', A'] ;; A'] ;; A' F'
  sscan :: [A' F', B', [B', A'] ;; B'] ;; B' F'
}

[A'.Foldable] Arr :: {
  ?>    :: [A',     Int ] ;; (X', ())
  =>    :: [A', X', Int ] ;;  A'
  len   ::  A'            ;; Int
  zip   :: [X' A', Y' A'] ;; [X', Y'] A'
  unzip :: [X', Y'] A'    ;; [X' A', Y' A']
}

"Arr #arrAlias"

[V'.Arr] View :: {
  drop    :: [V', Int] ;;  V'
  take    :: [V', Int] ;;  V'
  repeat  :: [V', Int] ;;  V'
  cycle   :: V'        ;;  V'
  reverse :: V'        ;;  V'
  concat  :: [V', V']  ;;  V'
  split   :: [V', Int] ;; [V', V']
}

[C'.View] Container :: {
  +>     :: [C', A'] ;; C'
  ->     :: [C', K'] ;; C'
  toArr  ::      C'  ;; [K', A'] Arr
}
