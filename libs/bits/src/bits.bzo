Bits #Module
Std  #Import










B8   :: #Unt8
B16  :: #Unt16
B32  :: #Unt32
B64  :: #Unt64
Bits :: (B8, B16, B32, B64)










[T'.Bits] and :: [T', T'] ;; T'
and :: #and-binop

[T'.Bits] or  :: [T', T'] ;; T'
or  :: #or-binop

[T'.Bits] xor :: [T', T'] ;; T'
xor :: #xor-binop

[T'.Bits] not :: T' ;; T'
not :: #not-op

[T'.Bits] >>  :: [T', I64] ;; T'
>>  :: #rshift-binop

[T'.Bits] <<  :: [T', I64] ;; T'
<<  :: #lshift-binop

clz :: Bits ;; I64
clz :: #ctlz-op

ctz :: Bits ;; I64
ctz :: #cttz-op

pct :: Bits ;; I64
pct :: #popcount-op










toInt  :: Bits ;; Int
toInt  :: #trunc

toUnt  :: Bits ;; Unt
toUnt  :: #trunc

toFlt  :: (B16, B32, B64) ;; Flt
toFlt  :: #floatcast

toPst  :: (B16, B32, B64) ;; Pst
toPst  :: #positcast

toBits :: Num ;; Bits
toBits :: #toBits
