Bits #Module
Std  #Import











Bits :: Int










[T'.Bits] and :: [T', T'] ;; T'
and :: #and-binop

[T'.Bits] or  :: [T', T'] ;; T'
or  :: #or-binop

[T'.Bits] xor :: [T', T'] ;; T'
xor :: #xor-binop

[T'.Bits] not :: T' ;; T'
not :: #not-op

[T'.Bits] >>  :: [T', Int] ;; T'
>>  :: #rshift-binop

[T'.Bits] <<  :: [T', Int] ;; T'
<<  :: #lshift-binop

clz :: Bits ;; Int
clz :: #ctlz-op

ctz :: Bits ;; Int
ctz :: #cttz-op

pct :: Bits ;; Int
pct :: #popcount-op










toInt  :: Bits ;; Int
toInt  :: #trunc

toFlt  :: Int ;; Flt
toFlt  :: #floatcast
